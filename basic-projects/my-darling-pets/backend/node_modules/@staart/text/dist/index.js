"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.randomString = exports.dateToDateTime = exports.capitalizeFirstLetter = exports.capitalizeFirstAndLastLetter = exports.capitalizeEachFirstLetter = exports.anonymizeIpAddress = exports.createSlug = exports.slugify = exports.hashIdToId = exports.generateHashId = exports.decodeBase64 = exports.encodeBase64 = exports.getSalt = exports.getRounds = exports.compare = exports.hash = exports.genSalt = exports.setRandomFallback = exports.isMatch = exports.ipRangeCheck = exports.ms = void 0;
const dotenv_1 = require("dotenv");
const ip_anonymize_1 = __importDefault(require("ip-anonymize"));
const cjs_1 = __importDefault(require("hashids/cjs"));
const slugify_1 = __importDefault(require("slugify"));
const crypto_random_string_1 = __importDefault(require("crypto-random-string"));
const ms_1 = __importDefault(require("ms"));
exports.ms = ms_1.default;
const ip_range_check_1 = __importDefault(require("ip-range-check"));
exports.ipRangeCheck = ip_range_check_1.default;
dotenv_1.config();
__exportStar(require("change-case"), exports);
var matcher_1 = require("matcher");
Object.defineProperty(exports, "isMatch", { enumerable: true, get: function () { return matcher_1.isMatch; } });
var bcryptjs_1 = require("bcryptjs");
Object.defineProperty(exports, "setRandomFallback", { enumerable: true, get: function () { return bcryptjs_1.setRandomFallback; } });
Object.defineProperty(exports, "genSalt", { enumerable: true, get: function () { return bcryptjs_1.genSalt; } });
Object.defineProperty(exports, "hash", { enumerable: true, get: function () { return bcryptjs_1.hash; } });
Object.defineProperty(exports, "compare", { enumerable: true, get: function () { return bcryptjs_1.compare; } });
Object.defineProperty(exports, "getRounds", { enumerable: true, get: function () { return bcryptjs_1.getRounds; } });
Object.defineProperty(exports, "getSalt", { enumerable: true, get: function () { return bcryptjs_1.getSalt; } });
Object.defineProperty(exports, "encodeBase64", { enumerable: true, get: function () { return bcryptjs_1.encodeBase64; } });
Object.defineProperty(exports, "decodeBase64", { enumerable: true, get: function () { return bcryptjs_1.decodeBase64; } });
const HASH_IDS = process.env.HASH_IDS || "";
const HASH_ID_PREFIX = process.env.HASH_ID_PREFIX || "";
const hashIds = new cjs_1.default(HASH_IDS, 10, "abcdefghijklmnopqrstuvwxyz1234567890");
/**
 * Generate a new hash ID
 * @param id - ID
 */
exports.generateHashId = (id) => `${HASH_ID_PREFIX}${hashIds.encode(id)}`;
/**
 * Convert a hash ID back to regular ID
 * @param id - Hash ID
 */
exports.hashIdToId = (id) => {
    if (typeof id === "number")
        return id.toString();
    if (id.startsWith(HASH_ID_PREFIX)) {
        const numberId = parseInt(hashIds.decode(id.replace(HASH_ID_PREFIX, "")).join(""));
        if (isNaN(numberId)) {
            const newId = parseInt(id);
            if (isNaN(newId)) {
                return id;
            }
            else {
                return newId.toString();
            }
        }
        else {
            return numberId.toString();
        }
    }
    return id;
};
/**
 * Convert a string to its slug
 * @param name -String to convert
 * @param options - Slugify options
 */
exports.slugify = (name, options) => slugify_1.default(name, options || { lower: true, strict: true });
/**
 * Convert a name/username to slug
 * @param name - Name to convert
 */
exports.createSlug = (name) => `${slugify_1.default(name, {
    lower: true,
}).replace(/'|"/g, "")}-${crypto_random_string_1.default({ length: 5 })}`;
/**
 * Anonymize an IP address
 */
exports.anonymizeIpAddress = (ipAddress) => ip_anonymize_1.default(ipAddress) || ipAddress;
/**
 * Capitalize each first letter in a string
 */
exports.capitalizeEachFirstLetter = (string) => (string = string
    .toLowerCase()
    .split(" ")
    .map((s) => s.charAt(0).toUpperCase() + s.toLowerCase().substring(1))
    .join(" "));
/**
 * Capitalize the first letter of each word in a string
 */
exports.capitalizeFirstAndLastLetter = (string) => {
    const words = string.split(" ");
    words[0] = exports.capitalizeFirstLetter(words[0]);
    words[words.length - 1] = exports.capitalizeFirstLetter(words[words.length - 1]);
    return words.join(" ");
};
/**
 * Capitalize the first letter of a string
 */
exports.capitalizeFirstLetter = (string) => string.charAt(0).toUpperCase() + string.toLowerCase().slice(1);
/**
 * Convert a JS Date to MySQL-compatible datetime
 */
exports.dateToDateTime = (date) => date.toISOString().slice(0, 19).replace("T", " ");
exports.randomString = crypto_random_string_1.default;
//# sourceMappingURL=index.js.map