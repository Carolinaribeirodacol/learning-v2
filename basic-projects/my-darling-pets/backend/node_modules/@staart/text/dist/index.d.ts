import cryptoRandomString from "crypto-random-string";
import ms from "ms";
import ipRangeCheck from "ip-range-check";
export * from "change-case";
export { ms, ipRangeCheck };
export { isMatch } from "matcher";
export { setRandomFallback, genSalt, hash, compare, getRounds, getSalt, encodeBase64, decodeBase64, } from "bcryptjs";
/**
 * Generate a new hash ID
 * @param id - ID
 */
export declare const generateHashId: (id: string) => string;
/**
 * Convert a hash ID back to regular ID
 * @param id - Hash ID
 */
export declare const hashIdToId: (id: string | number) => string;
/**
 * Convert a string to its slug
 * @param name -String to convert
 * @param options - Slugify options
 */
export declare const slugify: (name: string, options?: {
    replacement?: string | undefined;
    remove?: RegExp | undefined;
    lower?: boolean | undefined;
} | undefined) => string;
/**
 * Convert a name/username to slug
 * @param name - Name to convert
 */
export declare const createSlug: (name: string) => string;
/**
 * Anonymize an IP address
 */
export declare const anonymizeIpAddress: (ipAddress: string) => string;
/**
 * Capitalize each first letter in a string
 */
export declare const capitalizeEachFirstLetter: (string: string) => string;
/**
 * Capitalize the first letter of each word in a string
 */
export declare const capitalizeFirstAndLastLetter: (string: string) => string;
/**
 * Capitalize the first letter of a string
 */
export declare const capitalizeFirstLetter: (string: string) => string;
/**
 * Convert a JS Date to MySQL-compatible datetime
 */
export declare const dateToDateTime: (date: Date) => string;
export declare const randomString: typeof cryptoRandomString;
